<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机网络必备</title>
      <link href="/2024/09/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E8%B7%AF%E5%BF%85%E5%A4%87/"/>
      <url>/2024/09/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E8%B7%AF%E5%BF%85%E5%A4%87/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础知识</title>
      <link href="/2024/09/15/%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2024/09/15/%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h1><h2 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h2><p>当打包构建应用时，JavaScript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就会更加高效。</p><p>Vue Router 支持开箱即用的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#Dynamic_Imports">动态导入</a>，这意味着你可以用动态导入代替静态导入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将</span></span><br><span class="line"><span class="comment">// import UserDetails from &#x27;./views/UserDetails.vue&#x27;</span></span><br><span class="line"><span class="comment">// 替换成</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserDetails</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&#x27;./views/UserDetails.vue&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/users/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">UserDetails</span> &#125;</span><br><span class="line">    <span class="comment">// 或在路由定义里直接使用它</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/users/:id&#x27;</span>, <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./views/UserDetails.vue&#x27;</span>) &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>component</code> (和 <code>components</code>) 配置接收一个返回 Promise 组件的函数，Vue Router <strong>只会在第一次进入页面时才会获取这个函数</strong>，然后使用缓存数据。这意味着你也可以使用更复杂的函数，只要它们返回一个 Promise ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">UserDetails</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(&#123;</span><br><span class="line">    <span class="comment">/* 组件定义 */</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="HashRouter和-HistoryRouter的区别和原理"><a href="#HashRouter和-HistoryRouter的区别和原理" class="headerlink" title="HashRouter和 HistoryRouter的区别和原理?"></a>HashRouter和 HistoryRouter的区别和原理?</h2><h3 id="hashRouter原理"><a href="#hashRouter原理" class="headerlink" title="hashRouter原理"></a>hashRouter原理</h3><ul><li><strong>HashRouter</strong> 使用 URL 的哈希（即 <code>#</code> 符号后面的部分）来模拟完整的 URL 路径。</li><li>当哈希值改变时（例如从 <code>#home</code> 变为 <code>#about</code>），<strong>页面不会重新加载</strong>。相反，这种变化可以通过 JavaScript 捕捉到，并且可以用来动态地加载视图而不刷新页面。</li><li>哈希变化<strong>不会导致浏览器向服务器发送请求</strong>，因为哈希永远不会被包括在 HTTP 请求中。</li></ul><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>不支持HTML5，适合老的浏览器</p><p>适用那些不需要SEO的</p><h3 id="HistoryRouter原理"><a href="#HistoryRouter原理" class="headerlink" title="HistoryRouter原理"></a>HistoryRouter原理</h3><ul><li><strong>HistoryRouter</strong> 利用 HTML5 的 History API <strong>来维护浏览历史记录和 URL 的变化</strong>。</li><li>使用 <code>pushState</code>、<code>replaceState</code> 方法和 <code>popstate</code> 事件来实现 URL 的变化而不重新加载页面。</li><li>当这些方法被调用时，<strong>它们会改变浏览器的 URL 地址栏</strong>，但不会发送请求到服务器。</li></ul><h3 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h3><p>url格式：HashRouter包括#符号，HistoryRouter：不带</p><p>服务器配置：HashRouter不需要特殊的服务器配置，因为 URL 的哈希部分永远不会发送到服务器。<code>HistoryRouter</code> 需要服务器<strong>对所有可能的路由请求返回同一个 HTML 文件，否则用户直接访问</strong><code>http://example.com/about</code> 可能会导致 404 错误，除非服务器特别配置了路由规则。</p><p>浏览器兼容：hashRouter：在所有浏览器中都能工作，historyRouter：需要浏览器支持</p><p>SEO：前者不利于搜索，后者有利于</p><h2 id="Vue2-0-双向绑定的原理与缺陷"><a href="#Vue2-0-双向绑定的原理与缺陷" class="headerlink" title="Vue2.0 双向绑定的原理与缺陷?"></a>Vue2.0 双向绑定的原理与缺陷?</h2><p>Vue 2.0 使用 <strong>Object.defineProperty</strong> 来实现响应式系统。这个方法允许对一个对象的属性进行拦截，当属性被访问或修改时，Vue 可以捕捉到这些变化并做出相应的响应，如视图更新。</p><ol><li><strong>响应式对象</strong>：<ul><li>Vue 在初始化实例时对 data 对象的属性执行递归遍历，使用 <code>Object.defineProperty</code> 将它们转化为 getter&#x2F;setter，并收集依赖（即数据与视图之间的依赖关系），这是其双向绑定的核心。</li></ul></li><li><strong>依赖收集</strong>：<ul><li>当渲染函数被执行时，会读取到使用的属性，属性的 getter 函数就会执行。在 getter 函数中，会将当前的 watcher（观察者，即依赖）添加到这个属性的依赖列表中。</li></ul></li><li><strong>派发更新</strong>：<ul><li>当属性的值发生变化时，setter 会被调用，它会通知所有依赖于该属性的 watcher 对象，执行它们的 update 方法，引起视图的重新渲染。</li></ul></li></ol><p>缺陷：</p><p><strong>新增或删除属性</strong>：Vue 2.0 不能检测到对象属性的添加或删除。因此，如果你需要在对象上添加新的属性，需要使用 <code>Vue.set</code> 或者 <code>this.$set</code> 方法。</p><h2 id="Vue3-0-实现数据双向绑定的方法"><a href="#Vue3-0-实现数据双向绑定的方法" class="headerlink" title="Vue3.0 实现数据双向绑定的方法?"></a>Vue3.0 实现数据双向绑定的方法?</h2><p>原理：</p><p>Vue 3.0 引入了 Composition API 和使用 <strong>Proxy</strong> 对象来实现响应式系统，这是一种更为高效和强大的方式。</p><ol><li><strong>Proxy</strong>：<ul><li>Vue 3.0 使用 <code>Proxy</code> 对象包裹 data 对象，可以拦截对象的任意属性的读取和修改操作，包括属性添加和删除等操作。</li><li><code>Proxy</code> 可以监听动态添加的属性和删除的属性，也可以监听数组索引和长度的变化。</li></ul></li><li><strong>Reactivity API</strong>：<ul><li>Vue 3.0 提供了 <code>reactive</code>, <code>ref</code>, 和 <code>computed</code> 等 API 来创建响应式数据。</li><li><code>reactive</code> 用于创建响应式对象，<code>ref</code> 用于创建响应式的基本类型值。</li></ul></li></ol><h1 id="react"><a href="#react" class="headerlink" title="react"></a>react</h1><h2 id="React生命周期的各个阶段是什么"><a href="#React生命周期的各个阶段是什么" class="headerlink" title="React生命周期的各个阶段是什么?"></a>React生命周期的各个阶段是什么?</h2><h3 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h3><ol><li><ul><li><code>constructor()</code>: 构造函数，用于初始化组件的状态。</li><li><code>static getDerivedStateFromProps()</code>: 接收新的 props 和旧的 state，返回一个对象来更新 state，或者返回 null 表示不需要更新。</li><li><code>render()</code>: 渲染组件，返回一个 React 元素。</li></ul></li></ol><h3 id="更新阶段："><a href="#更新阶段：" class="headerlink" title="更新阶段："></a><strong>更新阶段</strong>：</h3><ul><li><code>shouldComponentUpdate()</code>: 接收新的 props 和 state，返回一个布尔值来决定是否需要重新渲染组件。</li><li><code>static getSnapshotBeforeUpdate()</code>: 在组件更新之前（DOM 更新之前）调用，可以返回一个值，该值会在 componentDidUpdate 中作为参数传入。</li></ul><h3 id="渲染输出阶段："><a href="#渲染输出阶段：" class="headerlink" title="渲染输出阶段："></a><strong>渲染输出阶段</strong>：</h3><ul><li><code>render()</code>: 组件的输出，返回一个 React 元素。</li></ul><h3 id="卸载阶段："><a href="#卸载阶段：" class="headerlink" title="卸载阶段："></a><strong>卸载阶段</strong>：</h3><ul><li><code>componentWillUnmount()</code>: 组件卸载之前调用，用于清理工作，如定时器、事件监听器等。</li></ul><h3 id="挂载后阶段："><a href="#挂载后阶段：" class="headerlink" title="挂载后阶段："></a><strong>挂载后阶段</strong>：</h3><ul><li><code>componentDidMount()</code>: 组件挂载（即添加到 DOM 后）之后立即调用，常用于执行 DOM 操作、发起网络请求等。</li></ul><h3 id="更新后阶段："><a href="#更新后阶段：" class="headerlink" title="更新后阶段："></a><strong>更新后阶段</strong>：</h3><ul><li><code>componentDidUpdate()</code>: 组件更新后调用，可以访问最新的 props 和 state，用于执行依赖于 DOM 的操作。</li></ul><h3 id="错误处理阶段："><a href="#错误处理阶段：" class="headerlink" title="错误处理阶段："></a><strong>错误处理阶段</strong>：</h3><ul><li><code>static getDerivedStateFromError()</code>: 接收一个错误参数，返回一个对象来更新 state，或者返回 null 表示不需要更新。</li><li><code>componentDidCatch()</code>: 接收一个错误参数和一个信息对象，信息对象包含组件堆栈等，用于错误边界的异常处理。</li></ul><h3 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h3><p>，生命周期主要由 React Hooks 提供：</p><ol><li><strong>初始化</strong>：<ul><li>使用 <code>useState</code> 来定义状态。</li></ul></li><li><strong>依赖项获取</strong>：<ul><li>使用 <code>useEffect</code> 来处理副作用和生命周期。</li></ul></li><li><strong>更新</strong>：<ul><li><code>useEffect</code> 的第二个参数可以指定依赖项列表，当依赖项变化时触发更新。</li></ul></li><li><strong>卸载</strong>：<ul><li>在 <code>useEffect</code> 中返回一个清理函数，用于组件卸载时执行清理操作。</li></ul></li></ol><h2 id="ReactRouter基本用法是什么"><a href="#ReactRouter基本用法是什么" class="headerlink" title="ReactRouter基本用法是什么?"></a>ReactRouter基本用法是什么?</h2><p>用LInk组件创建</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Navigation</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/contact&quot;</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用Navigate组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Navigate</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">RedirectToHome</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span> <span class="attr">replace</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态路由</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&quot;/users/:userId&quot;</span> element=&#123;<span class="language-xml"><span class="tag">&lt;<span class="name">UserProfile</span> /&gt;</span></span>&#125; /&gt;</span><br></pre></td></tr></table></figure><p>保护路由</p><p>你可以使用 <code>Navigate</code> 组件来重定向未授权的用户：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Route</span></span><br><span class="line">  path=<span class="string">&quot;/protected&quot;</span></span><br><span class="line">  element=&#123;user.<span class="property">isAuthenticated</span> ? <span class="language-xml"><span class="tag">&lt;<span class="name">Protected</span> /&gt;</span></span> : <span class="language-xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span> <span class="attr">replace</span> /&gt;</span></span>&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>嵌套路由：</p><p>一层层路由嵌套</p><p>使用Outlet等等</p><h2 id="React组件间传值的方法有哪些"><a href="#React组件间传值的方法有哪些" class="headerlink" title="React组件间传值的方法有哪些?"></a>React组件间传值的方法有哪些?</h2><p><strong>Props 传递</strong>：常见</p><p><strong>提升状态</strong>：</p><ul><li>将状态提升到共同的父组件中，然后通过props将其传递给需要它的子组件。</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ParentComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123; <span class="attr">sharedValue</span>: <span class="string">&#x27;some value&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ComponentA</span> <span class="attr">value</span>=<span class="string">&#123;this.state.sharedValue&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ComponentB</span> <span class="attr">value</span>=<span class="string">&#123;this.state.sharedValue&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ComponentA</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.value&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ComponentB</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.value&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Context API</strong>：</p><ul><li>当你想要跨多层组件传递数据时，可以使用Context API，它提供了一种方式，可以跨层级提供和访问数据。</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MyContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>(defaultValue);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">MyContext.Provider</span> <span class="attr">value</span>=<span class="string">&quot;some value&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ComponentA</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">MyContext.Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ComponentA</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">MyContext.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;value =&gt; <span class="tag">&lt;<span class="name">ComponentB</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">MyContext.Consumer</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ComponentB</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.value&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>状态管理库：</strong></p><ul><li>使用如 Redux、MobX、Zustand 等状态管理库来管理跨组件的状态。</li></ul><p><strong>Refs</strong>：</p><ul><li>使用Refs在组件间直接访问DOM节点或组件实例。</li></ul><p>回调函数之类</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS基础知识</title>
      <link href="/2024/09/15/JS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2024/09/15/JS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Axios-的拦截器原理及应用"><a href="#Axios-的拦截器原理及应用" class="headerlink" title="Axios 的拦截器原理及应用"></a>Axios 的拦截器原理及应用</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>Axios 拦截器允许开发者在请求发送或响应被处理之前对其进行拦截和修改。Axios 拦截器分为请求拦截器和响应拦截器：</p><ul><li><strong>请求拦截器</strong>：在发送请求到服务器之前，对请求数据进行处理或添加额外的信息，如设置通用的头信息、添加token等。</li><li><strong>响应拦截器</strong>：在服务器响应数据返回到then或catch之前，对数据进行预处理，如统一处理错误信息、格式化响应数据等。</li></ul><h2 id="创建一个axios"><a href="#创建一个axios" class="headerlink" title="创建一个axios"></a>创建一个axios</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口的地址：https://api.apiopen.top/getJoke</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//1.创建对象</span></span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    <span class="comment">//2.初始化</span></span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;https://api.apiopen.top/get&quot;</span>);</span><br><span class="line">    <span class="comment">//3.发送</span></span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line">    <span class="comment">//4.绑定事件，处理响应结果</span></span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//判断响应状态码 200-299</span></span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(xhr.<span class="property">response</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果失败</span></span><br><span class="line">                <span class="title function_">reject</span>(xhr.<span class="property">status</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//指定回调</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">//成功时</span></span><br><span class="line">&#125;,<span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(reason); <span class="comment">//失败时</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Fetch请求方式"><a href="#Fetch请求方式" class="headerlink" title="Fetch请求方式"></a>Fetch请求方式</h1><p>Fetch API 提供了一个更现代、更强大、更灵活的方式来发起网络请求。它是一个内置在现代浏览器中的API，用于替代传统的 <code>XMLHttpRequest</code>。</p><p>特点：</p><ul><li>返回一个 Promise，使得异步处理更加方便。</li><li>默认不发送或接收cookies，如果站点依赖于用户会话，则需要手动设置credentials。</li></ul><p>特点：</p><ul><li>返回一个 Promise，使得异步处理更加方便。</li><li>默认不发送或接收cookies，如果站点依赖于用户会话，则需要手动设置credentials。</li><li>更易于处理基于流的数据处理。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Network response was not ok&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>call、apply、bind区别</title>
      <link href="/2024/09/13/call%E3%80%81apply%E3%80%81bind%E5%8C%BA%E5%88%AB/"/>
      <url>/2024/09/13/call%E3%80%81apply%E3%80%81bind%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>经常看到有使用 <code>call</code> 和 <code>apply</code>,<code>ibnd</code> 这3个方法，每次看到后都会去网上搜一下用法，然而过一段时间就又不会了，归根到底是自己没有理解他的原理，这次准备彻底弄懂，并把自己的理解总结下来。</p><p>作用主要有两点：</p><ul><li>1、允许为不同的对象分配和调用属于另一个对象的函数&#x2F;方法，也就是改变（或者说是扩大）函数运行的作用域，优点：对象不需要跟方法有任何耦合关系；</li><li>2、提供新的 <code>this</code> 值给当前调用的函数&#x2F;方法。</li></ul><h1 id="call"><a href="#call" class="headerlink" title="call"></a>call</h1><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>thisArg</td><td>在fun函数运行时指定的this值。</td></tr><tr><td>arg1,arg2</td><td>指定的参数列表，必须一个一个的列出来</td></tr></tbody></table><p>实现步骤：</p><ol><li>判断调用对象是否是函数，定义在函数原型，出现用call等方式调用</li><li>判断传入上下文对象是否存在，如果不存在，则设置window</li><li>处理传参</li><li>函数作为上下文对象的一个属性</li><li>用上下文对象来调用方法，保存结果</li><li>删除新增属性</li><li>返回结果</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// call函数实现</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span>(<span class="params">context</span>) &#123;</span><br><span class="line">  <span class="comment">// 判断调用对象</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;type error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取参数</span></span><br><span class="line">  <span class="keyword">let</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>),</span><br><span class="line">      result = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 判断 context 是否传入，如果未传入则设置为 window</span></span><br><span class="line">  context = context || <span class="variable language_">window</span>;</span><br><span class="line">  <span class="comment">// 将调用函数设为对象的方法</span></span><br><span class="line">  context.<span class="property">fn</span> = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="comment">// 调用函数</span></span><br><span class="line">  result = context.<span class="title function_">fn</span>(...args);</span><br><span class="line">  <span class="comment">// 将属性删除</span></span><br><span class="line">  <span class="keyword">delete</span> context.<span class="property">fn</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h1><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>thisArg</td><td>在fun函数运行时指定的this值。</td></tr><tr><td>arguments</td><td>指定的参数数组</td></tr></tbody></table><ol><li>判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li><li>判断传入上下文对象是否存在，如果不存在，则设置为 window 。</li><li>将函数作为上下文对象的一个属性。</li><li>判断参数值是否传入</li><li>使用上下文对象来调用这个方法，并保存返回结果。</li><li>删除刚才新增的属性</li><li>返回结果</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// apply 函数实现</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span>(<span class="params">context</span>) &#123;</span><br><span class="line">  <span class="comment">// 判断调用对象是否为函数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 判断 context 是否存在，如果未传入则为 window</span></span><br><span class="line">  context = context || <span class="variable language_">window</span>;</span><br><span class="line">  <span class="comment">// 将函数设为对象的方法</span></span><br><span class="line">  context.<span class="property">fn</span> = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="comment">// 调用方法</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">arguments</span>[<span class="number">1</span>]) &#123;</span><br><span class="line">    result = context.<span class="title function_">fn</span>(...<span class="variable language_">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = context.<span class="title function_">fn</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将属性删除</span></span><br><span class="line">  <span class="keyword">delete</span> context.<span class="property">fn</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h1><ol><li>判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li><li>保存当前函数的引用，获取其余传入参数值。</li><li>创建一个函数返回</li><li>函数内部使用 apply 来绑定函数调用，需要判断函数作为构造函数的情况，这个时候需要传入当前函数的 this 给 apply 调用，其余情况都传入指定的上下文对象。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bind 函数实现</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span>(<span class="params">context</span>) &#123;</span><br><span class="line">  <span class="comment">// 判断调用对象是否为函数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取参数</span></span><br><span class="line">  <span class="keyword">var</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>),</span><br><span class="line">      fn = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 根据调用方式，传入不同绑定值</span></span><br><span class="line">    <span class="keyword">return</span> fn.<span class="title function_">apply</span>(</span><br><span class="line">      <span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">Fn</span> ? <span class="variable language_">this</span> : context,</span><br><span class="line">      args.<span class="title function_">concat</span>(...<span class="variable language_">arguments</span>)</span><br><span class="line">    );</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="call-和-apply-的常见用法"><a href="#call-和-apply-的常见用法" class="headerlink" title="call()和 apply 的常见用法"></a><code>call()</code>和 <code>apply</code> 的常见用法</h2><p><code>apply</code> 常常被用于数组操作。</p><blockquote><p>1、如合并两个数组，且改变原数组。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>];     </span><br><span class="line"><span class="keyword">var</span> elements = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];   </span><br><span class="line">array.<span class="property">push</span>.<span class="title function_">apply</span>(array, elements);  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array); <span class="comment">// [&quot;a&quot;, &quot;b&quot;, 0, 1, 2]  </span></span><br></pre></td></tr></table></figure><blockquote><p>如求取数组中的最大最小值。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>];  </span><br><span class="line"><span class="keyword">var</span> max = <span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, numbers);    </span><br><span class="line"><span class="comment">/* 基本等同于 Math.max(5, 6, 2, 3, 7)  */</span>   </span><br><span class="line"><span class="keyword">var</span> min = <span class="title class_">Math</span>.<span class="property">min</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, numbers);  </span><br><span class="line"><span class="comment">/* 基本等同于 Math.min(5, 6, 2, 3, 7)  */</span> </span><br><span class="line">     </span><br></pre></td></tr></table></figure><blockquote><p>实现继承</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">showName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">showAge</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Teacher</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="title class_">Person</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, [age,name]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">25</span>);</span><br><span class="line"><span class="keyword">var</span> t1 = <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">30</span>);</span><br><span class="line">t1.<span class="title function_">showName</span>();<span class="comment">//&quot;张三&quot;</span></span><br><span class="line">t1.<span class="title function_">showAge</span>();<span class="comment">//30</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对称加密与非对称加密</title>
      <link href="/2024/08/25/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E4%B8%8E%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
      <url>/2024/08/25/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E4%B8%8E%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h1><p>对称加密又叫做<strong>私钥加密</strong>，即信息的发送方和接收方使用同一个密钥去加密和解密数据。由于其速度快，对称性加密通常在消息发送方需要加密大量数据时使用。对称性加密也称为<a href="https://baike.baidu.com/item/%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86">密钥加密</a>。常见的对称加密算法有DES、3DES、AES等。</p><p>对称加密的过程如下：</p><ol><li>明文 + 加密算法 + 私钥 &#x3D;&gt; 密文</li><li>密文 + 解密算法 + 私钥 &#x3D;&gt; 明文</li></ol><h1 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h1><p>非对称加密也叫做<strong>公钥加密</strong>，它使用一对密钥，即公钥和私钥，且二者成对出现。常见的非对称加密算法有RSA、DSA等。</p><p>非对称加密的过程如下：</p><ol><li>被公钥或私钥加密的密文只能被对应的另一个密钥解密。</li><li>公钥可以加密，但只有私钥可以解密；私钥可以加密，但只有公钥可以解密。</li></ol><h1 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h1><h1 id="Https的加密原理"><a href="#Https的加密原理" class="headerlink" title="Https的加密原理"></a>Https的加密原理</h1><p>它结合了对称加密和非对称加密的方式，实现数据传输的安全性。在HTTPS中，服务器和客户端首先使用非对称加密的方式交换密钥，然后使用对称加密的方式对数据进行加密和解密。</p><ol><li>非对称加密用于<strong>密钥交换</strong>：服务器和客户端首先通过 非对称加密的方式交换密钥。客户端生成一对公钥和私钥，并将公钥发送给服务器。服务器使用客户端的公钥对一个随机生成的密钥进行加密，并将密文发送给客户端。客户端使用自己的私钥解密得到这个随机生成的密钥，这个密钥就是之后用来对数据进行对称加密的密钥。</li><li>对称加密用于<strong>数据传输</strong>：使用前面交换得到的密钥，客户端和服务器对数据进行对称加密和解密。由于对称加密算法的加解密速度较快，因此适合用于对大量数据进行加密。</li><li><strong>非对称加密用于身份验证</strong>：在HTTPS中，服务器还会通过非对称加密的方式向客户端证明自己的身份。服务器会用自己的私钥对一些信息进行签名，然后将<strong>签名和公钥</strong>一起发送给客户端。客户端使用服务器的公钥验证签名，从而确认服务器的身份。这样可以防止中间人攻击，确保数据传输的安全性。</li></ol><p>总结来说，HTTPS通过结合对称加密和非对称加密的方式，实现了数据传输的安全性和完整性。对称加密用于数据加解密，而非对称加密则用于密钥交换和身份验证。这种结合方式使得HTTPS能够提供高强度的安全保障，保护我们的网络通信不受攻击和干扰。</p><h1 id="关于https"><a href="#关于https" class="headerlink" title="关于https"></a>关于https</h1><p>是一种超文本传输协议，是一种通过<a href="https://zh.wikipedia.org/wiki/%E8%A8%88%E7%AE%97%E6%A9%9F%E7%B6%B2%E7%B5%A1">计算机网络</a>进行安全通信的<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E8%B7%AF%E5%82%B3%E8%BC%B8%E5%8D%94%E5%AE%9A">传输协议</a>。HTTPS经由<a href="https://zh.wikipedia.org/wiki/HTTP">HTTP</a>进行通信，但利用<a href="https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E5%B1%82%E5%AE%89%E5%85%A8">SSL&#x2F;TLS</a>来加密数据包。HTTPS开发的主要目的，是提供对<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E7%AB%99">网站</a>服务器的<a href="https://zh.wikipedia.org/wiki/%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81">身份认证</a>，保护交换数据的隐私与<a href="https://zh.wikipedia.org/wiki/%E5%AE%8C%E6%95%B4%E6%80%A7">完整性</a>。这个协议由<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E6%99%AF">网景</a>公司（Netscape）在1994年首次提出，随后扩展到<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E9%9A%9B%E7%B6%B2%E8%B7%AF">互联网</a>上。HTTPS是并非应用层的新协议。只是HTTP通信接口用<strong>SSL或TLS协议代替而已。</strong></p><p><a href="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/7/1/164561a49c937e68~tplv-t2oaga2asx-image.image">imageHttps</a></p><p>在采用ssl后，http就拥有了加密、证书、完整性保护这些功能。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 速记 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>px em rem的区别</title>
      <link href="/2024/08/24/px-em-rem%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2024/08/24/px-em-rem%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="px-em-rem-三者的区别"><a href="#px-em-rem-三者的区别" class="headerlink" title="px em rem 三者的区别"></a>px em rem 三者的区别</h1><ul><li><strong>px</strong>是固定的像素，是相对于显示器屏幕分辨率而言的，一旦设置了就无法因为适应页面大小而改变。</li></ul><p>为了解决<strong>px</strong>的问题，提出了<strong>em</strong>。它是相对于当前对象内文本的字体尺寸，若没有设置行内文本的字体尺寸，则使用浏览器默认字体尺寸，一般为16px。</p><p>但<strong>em</strong>使用起来依旧有诸多不便，复杂的嵌套逻辑使得更改了部分元素会产生字体大小变化的连锁反应。</p><p><strong>rem</strong>是<strong>CSS3</strong>新增加的相对单位，即<code>root em</code>，是<strong>相较于根元素</strong>（html)。rem的根据根节点使得计算更清晰。</p><ul><li><strong>em</strong>和<strong>rem</strong>相对于px更具有灵活性，他们是相对长度单位，意思是长度不是定死了的，更适用于响应式布局，场景如移动端。<strong>em</strong>和<strong>rem</strong>都是由浏览器转换为像素值，具体大小取决于设计中的字体大小设置。</li></ul><p><strong>em 和 rem 单位之间的区别是浏览器根据谁来转化成px值，理解这种差异是决定何时使用哪个单元的关键。</strong></p><h1 id="em单位如何转换为px"><a href="#em单位如何转换为px" class="headerlink" title="em单位如何转换为px"></a>em单位如何转换为px</h1><p>使用em’单位时候像素值是将em×用em单位的元素的字体大小，转换成像素大小取决于在当前元素的字体尺寸</p><p>举个例子： 一个div里有18px字体，10em即里面的字体等同于180px</p><h1 id="rem单位如何转换为px"><a href="#rem单位如何转换为px" class="headerlink" title="rem单位如何转换为px"></a>rem单位如何转换为px</h1><p>转换为像素大小取决于<strong>页根元素</strong>的字体大小</p><p>比如：</p><p>根元素字体：16px，10rem&#x3D;160px</p><h1 id="存在的问题与优点"><a href="#存在的问题与优点" class="headerlink" title="存在的问题与优点"></a>存在的问题与优点</h1><p>em单位继承的时候，每个元素总是自动继承父元素的字体，继承效果很容易被明确的字体单位覆盖，px，vw等等</p><p>rem的优点就很显著，使用rem为元素设定字体大小时，是相对HTML根元素的大小。这个单位可以做到只修改根元素成比例地调整所有字体大小，又能避免字体大小逐层复合连锁关系。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冒泡与捕获事件</title>
      <link href="/2024/08/19/%E5%86%92%E6%B3%A1%E4%B8%8E%E6%8D%95%E8%8E%B7%E4%BA%8B%E4%BB%B6/"/>
      <url>/2024/08/19/%E5%86%92%E6%B3%A1%E4%B8%8E%E6%8D%95%E8%8E%B7%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="冒泡"><a href="#冒泡" class="headerlink" title="冒泡"></a>冒泡</h3><p>点击大一点的最顶层的盒子的时候，优先处理了那个小盒子，而父盒子里面那个小盒子的话，后面才去加载，这样做在处理hover的时候容易触发区域改变有问题，详情见我的项目友情链接那个地方</p><p><strong>当一个事件发生在一个元素上，它会首先运行在该元素上的处理程序，然后运行其父元素上的处理程序，然后一直向上到其他祖先上的处理程序。</strong></p><p>假设我们有 3 层嵌套 <code>FORM &gt; DIV &gt; P</code>，它们各自拥有一个处理程序：</p><p>点击内部的 <code>&lt;p&gt;</code> 会首先运行 <code>onclick</code>：</p><ol><li>在该 <code>&lt;p&gt;</code> 上的。</li><li>然后是外部 <code>&lt;div&gt;</code> 上的。</li><li>然后是外部 <code>&lt;form&gt;</code> 上的。</li><li>以此类推，直到最后的 <code>document</code> 对象。</li></ol><p>因此，如果我们点击 <code>&lt;p&gt;</code>，那么我们将看到 3 个 alert：<code>p</code> → <code>div</code> → <code>form</code>。</p><p>这个过程被称为“冒泡（bubbling）”，因为事件从内部元素“冒泡”到所有父级，就像在水里的气泡一样。</p><p><code>event.target</code> 可能会等于 <code>this</code> —— 当点击事件发生在 <code>&lt;form&gt;</code> 元素上时，就会发生这种情况。</p><p>具体例子，想要实现鼠标移动到父div时，显示更大的子div浮层卡片</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import &#123; useRef &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const LinkDetails = (&#123; post, getConfig, index &#125;) =&gt; &#123;</span><br><span class="line">  const tooltipRef = useRef(null);</span><br><span class="line">  const handleMouseOver = (e) =&gt; &#123;</span><br><span class="line">    e.stopPropagation();</span><br><span class="line">    if (tooltipRef.current) &#123;</span><br><span class="line">      tooltipRef.current.style.opacity = &quot;1&quot;;</span><br><span class="line">      tooltipRef.current.style.visibility = &quot;visible&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  const handleMouseOut = (e) =&gt; &#123;</span><br><span class="line">    if (tooltipRef.current) &#123;</span><br><span class="line">      tooltipRef.current.style.opacity = &quot;0&quot;;</span><br><span class="line">      tooltipRef.current.style.visibility = &quot;hidden&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">          &lt;div</span><br><span class="line">            className=&quot;flex flex-col space-y-0.5 flex-grow w-3/4 hover-trigger&quot;</span><br><span class="line">            onMouseOver=&#123;(e) =&gt; handleMouseOver(e)&#125;</span><br><span class="line">            onMouseOut=&#123;(e) =&gt; handleMouseOut(e)&#125;</span><br><span class="line">          &gt;</span><br><span class="line">            &lt;h2 className=&quot;text-sm font-semibold leading-5 truncate&quot;&gt;</span><br><span class="line">              &#123;post.title&#125;</span><br><span class="line">            &lt;/h2&gt;</span><br><span class="line">            &lt;p className=&quot;text-current text-xs truncate &quot;&gt;&#123;post.description&#125;&lt;/p&gt;</span><br><span class="line">            &lt;div</span><br><span class="line">              ref=&#123;tooltipRef&#125;</span><br><span class="line">              className=&#123;classNames(</span><br><span class="line">                &quot;w-full p-2 bg-gray-700/[.9] text-white text-sm rounded-md&quot;,</span><br><span class="line">                &quot;absolute bottom-10 xl:left-[75px] left-[10px] z-[55]&quot;,</span><br><span class="line">                &quot;opacity-0 visibility-hidden transition-opacity duration-300&quot;</span><br><span class="line">              )&#125;</span><br><span class="line">            &gt;</span><br><span class="line">              &#123;post.description&#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="捕获"><a href="#捕获" class="headerlink" title="捕获"></a>捕获</h3><p>事件处理的另一个阶段被称为“捕获（capturing）”。它很少被用在实际开发中，但有时是有用的。</p><p><a href="http://www.w3.org/TR/DOM-Level-3-Events/">DOM 事件</a>标准描述了事件传播的 3 个阶段：</p><ol><li>捕获阶段（Capturing phase）—— 事件（从 Window）向下走近元素。</li><li>目标阶段（Target phase）—— 事件到达目标元素。</li><li>冒泡阶段（Bubbling phase）—— 事件从元素上开始冒泡。</li></ol><img src="https://s2.loli.net/2024/08/19/sENeBL7cPfJhnMG.png" alt="捕获图示" style="zoom: 80%;" /><p>也就是说：点击 <code>&lt;td&gt;</code>，事件首先通过祖先链向下到达元素（捕获阶段），然后到达目标（目标阶段），最后上升（冒泡阶段），在途中调用处理程序。</p><p>总结</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">body</span> * &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span>FORM</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>DIV</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>P<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">for</span>(<span class="keyword">let</span> elem <span class="keyword">of</span> <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;*&#x27;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">    elem.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="params">e</span> =&gt;</span> <span class="title function_">alert</span>(<span class="string">`Capturing: <span class="subst">$&#123;elem.tagName&#125;</span>`</span>), <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">    elem.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="params">e</span> =&gt;</span> <span class="title function_">alert</span>(<span class="string">`Bubbling: <span class="subst">$&#123;elem.tagName&#125;</span>`</span>));</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面这段代码为文档中的 <strong>每个</strong> 元素都设置了点击处理程序，以查看哪些元素上的点击事件处理程序生效了。</p><p>如果你点击了 <code>&lt;p&gt;</code>，那么顺序是：</p><ol><li><code>HTML</code> → <code>BODY</code> → <code>FORM</code> → <code>DIV</code>（捕获阶段第一个监听器）：</li><li><code>P</code>（目标阶段，触发两次，因为我们设置了两个监听器：捕获和冒泡）</li><li><code>DIV</code> → <code>FORM</code> → <code>BODY</code> → <code>HTML</code>（冒泡阶段，第二个监听器）。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flex布局</title>
      <link href="/2024/08/17/see-you-again/"/>
      <url>/2024/08/17/see-you-again/</url>
      
        <content type="html"><![CDATA[<h3 id="六个大属性"><a href="#六个大属性" class="headerlink" title="六个大属性"></a>六个大属性</h3><ul><li>flex-direction 决定主轴位置，横着来还是竖着来</li><li>flex-wrap 决定怎么排列，能不能换行</li><li>flex-flow 就是上面两个的简写方式 row nowrap默认值</li><li>justify-content 项目在主轴的对齐方式</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br><span class="line">// 前面 后面 中间 两边贴着等间距 两边不贴着等间距</span><br></pre></td></tr></table></figure><ul><li>align-items 交叉轴上的对齐，类似手风琴吧，适合高度不一样的中间内容对齐</li><li>align-conten 多根轴线的对齐，适合多内容</li></ul><p><strong>flex-grow 设置为1，表示该项可以在父容器内扩展，占据所有可用的额外空间</strong>。</p><h3 id="子盒子里面"><a href="#子盒子里面" class="headerlink" title="子盒子里面"></a>子盒子里面</h3><ul><li><code>order</code> 数值越小越往前，弄排序</li><li><code>flex-grow</code> 看放大比例</li><li><code>flex-shrink</code> 弄缩小比例 可弄一边固定另一边不缩小</li><li><code>flex-basis</code> 计算占多余空间</li><li><code>flex</code> 前三个的缩写</li><li><code>align-self</code> 抽象，覆盖</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>单向链表的初始化与增删改查</title>
      <link href="/2023/02/14/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8E%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
      <url>/2023/02/14/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8E%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><h4 id="两种"><a href="#两种" class="headerlink" title="两种"></a>两种</h4><p>单链表的初始化我用了两种方法</p><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>调用Iterable接口，准备内部类，一个泛型的示例</p><p>定义头结点，长度</p><p>写节点类，构造器</p><p>重写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkList</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Node head;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> N;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        T item;</span><br><span class="line">        Node next;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(T item, Node next)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.item = item;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//（中间写构造方法）</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator <span class="title function_">iterator</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LIterator</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> LinkList.Node n;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">LIterator</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.n = head;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> hasNext&#123;</span><br><span class="line">            <span class="keyword">return</span> n.next!= <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> Object next&#123;</span><br><span class="line">            n = n.next;</span><br><span class="line">            <span class="keyword">return</span> n.item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>先创建一个头结点，它是单链表的头，后面没添加一个结点就加入到链表的最后</p><p>写头结点类，这里是创建结点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HeroNode</span> &#123;</span><br><span class="line"><span class="type">int</span> no;</span><br><span class="line">    String name;</span><br><span class="line">    String nickName;</span><br><span class="line">    HeroNode next;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HeroNode</span><span class="params">(<span class="type">int</span> no, String name, String nickname)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.no = no;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.nickname = nickname;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;no:&quot;</span> + no + <span class="string">&quot; name:&quot;</span> + name + <span class="string">&quot; nickname:&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化头结点，写各种方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SingliLinkedList</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">HeroNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">0</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(HeroNode heroNode)</span> &#123;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(temp.next == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到最后</span></span><br><span class="line">        temp.next = heroNode;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head.next == <span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(temp);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写测试类</p><p>先创建结点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleLinkedListDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">hero1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">1</span>, <span class="string">&quot;原种无影&quot;</span>, <span class="string">&quot;爱梅特赛尔克&quot;</span>);</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">hero2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">2</span>, <span class="string">&quot;维涅斯&quot;</span>, <span class="string">&quot;海德林&quot;</span>);</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">hero3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">3</span>, <span class="string">&quot;食材&quot;</span>, <span class="string">&quot;拉拉肥&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">SingleLinkList</span> <span class="variable">singleLinkedList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingleLinkedList</span>();</span><br><span class="line">        singleLinkedList.add(hero1);</span><br><span class="line">        singleLinkedList.add(hero2);</span><br><span class="line">        singleLinkedList.add(hero3);</span><br><span class="line">        </span><br><span class="line">        singleLinkedList.list();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除结点"><a href="#删除结点" class="headerlink" title="删除结点"></a>删除结点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeIndex</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line"><span class="type">Node</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt;= i - <span class="number">1</span>; index ++)&#123;</span><br><span class="line">        pre = pre.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">curr</span> <span class="operator">=</span> pre.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="插入结点"><a href="#插入结点" class="headerlink" title="插入结点"></a>插入结点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(T t)</span>&#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">n</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="keyword">while</span>(n.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        n = n.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(t, <span class="literal">null</span>);</span><br><span class="line">    n.next = newNode;</span><br><span class="line">    N++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取结点"><a href="#获取结点" class="headerlink" title="获取结点"></a>获取结点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> T <span class="title function_">get</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">n</span> <span class="operator">=</span> head.next;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; i; index++)&#123;</span><br><span class="line">        n = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n.item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查找结点"><a href="#查找结点" class="headerlink" title="查找结点"></a>查找结点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(T t)</span> &#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">n</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; </span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;List is empty&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(n != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n.item == t)&#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">            n = n.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单向链表 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双向链表的初始化与增删改查</title>
      <link href="/2023/02/13/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8E%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
      <url>/2023/02/13/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8E%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title="****"></a>****</h2><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><h4 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h4><h5 id="结点类"><a href="#结点类" class="headerlink" title="结点类"></a>结点类</h5><p>先创建结点类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeroNode2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> no;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String nikeName;</span><br><span class="line">    <span class="keyword">public</span> HeroNode2 next;</span><br><span class="line">    <span class="keyword">public</span> HeroNode2 pre;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HeroNode2</span><span class="params">(<span class="type">int</span> no, String name, String nikeName)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.no = no;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.nikeName = nikeName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;HeroNo:&quot;</span> + no + <span class="string">&quot;HeroName&quot;</span> + name + <span class="string">&quot;nikeName&quot;</span> + nikeName;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="构建双链表类"><a href="#构建双链表类" class="headerlink" title="构建双链表类"></a>构建双链表类</h5><p><em>里面构造方法</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">doubleLinked</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">HeroNode2</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode2</span>(<span class="number">0</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> HeroNode2 <span class="title function_">getHead</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//. . . . . . . </span></span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoubleLinkedList</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">HeroNode2</span> <span class="variable">hero1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode2</span>(<span class="number">1</span>,<span class="string">&quot;Marisa&quot;</span>,<span class="string">&quot;mar&quot;</span>);</span><br><span class="line">        <span class="type">HeroNode2</span> <span class="variable">hero2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode2</span>(<span class="number">2</span>,<span class="string">&quot;Reimu&quot;</span>,<span class="string">&quot;rei&quot;</span>);</span><br><span class="line">        <span class="type">HeroNode2</span> <span class="variable">hero3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode2</span>(<span class="number">3</span>,<span class="string">&quot;Cirno&quot;</span>,<span class="string">&quot;qii&quot;</span>);</span><br><span class="line">        <span class="type">HeroNode2</span> <span class="variable">hero4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode2</span>(<span class="number">4</span>,<span class="string">&quot;Meirin&quot;</span>,<span class="string">&quot;hon&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------Inilization--------&quot;</span>);</span><br><span class="line">        <span class="type">DoubleLinked</span> <span class="variable">doubleLinked</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DoubleLinked</span>();</span><br><span class="line">        doubleLinked.add(hero1);</span><br><span class="line">        doubleLinked.add(hero2);</span><br><span class="line">        doubleLinked.add(hero3);</span><br><span class="line">        doubleLinked.add(hero4);</span><br><span class="line">        doubleLinked.add(<span class="keyword">new</span> <span class="title class_">HeroNode2</span>(<span class="number">5</span>,<span class="string">&quot;ABC&quot;</span>,<span class="string">&quot;A&quot;</span>));</span><br><span class="line"></span><br><span class="line">        doubleLinked.list();</span><br><span class="line">        System.out.println(doubleLinked.listSingle(<span class="number">2</span>));</span><br><span class="line">        doubleLinked.ModifyPos(<span class="number">3</span>,<span class="string">&quot;新改的&quot;</span>);</span><br><span class="line">        doubleLinked.list();</span><br><span class="line"></span><br><span class="line">        <span class="type">HeroNode2</span> <span class="variable">hero7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode2</span>(<span class="number">5</span>,<span class="string">&quot;Yukari&quot;</span>,<span class="string">&quot;zima&quot;</span>);</span><br><span class="line">        doubleLinked.insert(<span class="number">1</span>,hero7);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------Insert-----------&quot;</span>);</span><br><span class="line">        doubleLinked.list();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------Del-------------&quot;</span>);</span><br><span class="line">        doubleLinked.del(<span class="number">5</span>);</span><br><span class="line">        doubleLinked.list();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h5><p>可以直接使用head</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">if</span>(head.next = <span class="literal">null</span>)&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;The doublieLink is null&quot;</span>);</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">HeroNode2</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line">       <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">           <span class="keyword">if</span>(temp == <span class="literal">null</span>)&#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.print(temp);</span><br><span class="line">           temp = temp.next;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="查找特定值"><a href="#查找特定值" class="headerlink" title="查找特定值"></a>查找特定值</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">findSingle</span><span class="params">(<span class="type">int</span> pos)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head.next == <span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;null&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">HeroNode2</span> <span class="variable">tem</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="comment">//注意这里的head.next开始，移动到pos位置只需要pos-1次</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; pos; i++)&#123;</span><br><span class="line">            tem = tem.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tem.name;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="修改结点"><a href="#修改结点" class="headerlink" title="修改结点"></a>修改结点</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ModifyPos</span><span class="params">(<span class="type">int</span> pos, String name)</span>&#123;</span><br><span class="line">    <span class="type">HeroNode2</span> <span class="variable">tem</span> <span class="operator">=</span> head.next;</span><br><span class="line">    <span class="keyword">if</span>(tem.next == <span class="literal">null</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;The link is null&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(tem.no != pos )&#123;</span><br><span class="line">        tem = tem.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**for</span></span><br><span class="line"><span class="comment">    *循环也可以，上面不要忘记处理null的条件，其实个人觉得没什么必要</span></span><br><span class="line"><span class="comment">    for(int idnex = 1; index &lt; pos; index++)&#123;</span></span><br><span class="line"><span class="comment">    tem = tem.next;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    tem.name = name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(HeroNode2 heroNode)</span>&#123;</span><br><span class="line">    <span class="type">HeroNode2</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line">    <span class="keyword">while</span>(temp.next != <span class="literal">null</span>)&#123;</span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    temp.next = heroNode;</span><br><span class="line">    heroNode.pre = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="添加结点"><a href="#添加结点" class="headerlink" title="添加结点"></a>添加结点</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> pos, HeroNode2 newNode)</span>&#123;</span><br><span class="line">    <span class="type">HeroNode2</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">1</span>; index &lt; pos; index++)&#123;</span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">HeroNode2</span> <span class="variable">last</span> <span class="operator">=</span> temp.next;</span><br><span class="line">    temp.next = newNode;</span><br><span class="line">    newNode.next = last;</span><br><span class="line">    last.pre = newNode;</span><br><span class="line">    newNode.pre = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="删除结点"><a href="#删除结点" class="headerlink" title="删除结点"></a>删除结点</h5><p>要考虑删除时不存在的情况，不能使用for循环和直接的指向</p><p>用前后指针来写，注意要加多一个最后为空的判断情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delNode</span><span class="params">(<span class="type">int</span> no)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head.next == <span class="literal">null</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;NULL&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">HeroNode2</span> <span class="variable">prer</span> <span class="operator">=</span> head.next;</span><br><span class="line">    flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp == ture)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;NULL&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp.no == no)&#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag == <span class="literal">true</span>)&#123;</span><br><span class="line">        temp.pre.next = temp.next;</span><br><span class="line">        <span class="keyword">if</span>(temp.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            temp.next.pre = temp;.pre;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;del %d not exist\n&quot;</span>,no);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/2023/02/13/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2023/02/13/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="韩冬作业题"><a href="#韩冬作业题" class="headerlink" title="韩冬作业题"></a>韩冬作业题</h2><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pubulic <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertSort</span><span class="params">()</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">insertVal</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        <span class="type">int</span> <span class="variable">insertIndex</span> <span class="operator">=</span> i - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//循环插入</span></span><br><span class="line">        <span class="keyword">while</span>(insertIndex &gt;= <span class="number">0</span> &amp;&amp; insertVal &lt; arr[insertIndex])&#123;</span><br><span class="line">            arr[insertIndex + <span class="number">1</span>] = arr[insertIndex];</span><br><span class="line">            insertIndex --;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[insertIndex+<span class="number">1</span>] = insertVal</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="希尔排序-斐波那契数列"><a href="#希尔排序-斐波那契数列" class="headerlink" title="希尔排序-斐波那契数列"></a>希尔排序-斐波那契数列</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shellSortArray</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">    <span class="comment">//用斐波那契的希尔排序</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">fb</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">    <span class="comment">//确定间隔数据量</span></span><br><span class="line">    <span class="keyword">while</span>(fbii(bi)&lt; <span class="number">10000</span>/<span class="number">2</span>)&#123;</span><br><span class="line">        arrayList.add(fbii(fb));</span><br><span class="line">        fb++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">span</span> <span class="operator">=</span> arrayList.size()-<span class="number">1</span>; span &gt; <span class="number">0</span>; span--)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">spaner</span> <span class="operator">=</span> arrayList.get(span);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> spaner; i &lt; arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - spaner; j &gt;= <span class="number">0</span>; j--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j] &gt; arr[j + spaner])&#123;</span><br><span class="line">                    <span class="comment">//交换</span></span><br><span class="line">                    temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j + spaner];</span><br><span class="line">                    arr[j + spaner] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fbii</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span> || n == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fbii(n-<span class="number">1</span>) + fbii(n-<span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] array)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; array.length-<span class="number">1</span>-i; j++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> array[i];</span><br><span class="line">            array[i] = array[i+<span class="number">1</span>];</span><br><span class="line">            array[i+<span class="number">1</span>] =</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">time</span> <span class="operator">=</span> <span class="number">0</span>; time &lt; array.length-<span class="number">1</span>; time++) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">Arraysmallest</span> <span class="operator">=</span> array[indexCurr+<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">recodSmallIndex</span> <span class="operator">=</span> indexCurr+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> indexCurr + <span class="number">1</span>; index &lt; array.length; index++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(Arraysmallest &gt; array[index]) &#123;</span><br><span class="line">            Arraysmallest = array[index];</span><br><span class="line">            recodSmallest = index;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(array[indexCurr] &gt;= array[recodSmallest]) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> array[indexCurr];</span><br><span class="line">        array[indexCurr] = array[recodSmallIndex];</span><br><span class="line">        array[recodSmallIndex] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(indexCurr &lt; array.length-<span class="number">2</span>)&#123;</span><br><span class="line">        indexCurr++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="归并"><a href="#归并" class="headerlink" title="归并"></a>归并</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span>[] temp)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">        mergeSort(arr, left, mid, temp);</span><br><span class="line">        mergeSort(arr, right, mid+<span class="number">1</span>, temp);</span><br><span class="line">        merge(arr, left, mid, right, temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right, <span class="type">int</span>[] temp)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left;</span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> mid +<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= right)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &lt; arr[j])&#123;</span><br><span class="line">            temp[t] = arr[i];</span><br><span class="line">            t++;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            temp[t] arr[j];</span><br><span class="line">            t++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid)&#123;</span><br><span class="line">        temp[t] = arr[i]</span><br><span class="line">        t++;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(j &lt;= right)&#123;</span><br><span class="line">        temp[t] = arr[j];</span><br><span class="line">        t++;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    t = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">tempLeft</span> <span class="operator">=</span> left;</span><br><span class="line">    <span class="keyword">while</span>(tempLeft &lt;= right)&#123;</span><br><span class="line">        arr[tempLeft] = temp[t];</span><br><span class="line">        t++;</span><br><span class="line">        tempLeft++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="快速"><a href="#快速" class="headerlink" title="快速"></a>快速</h4><p>QWQ</p><h4 id="基数"><a href="#基数" class="headerlink" title="基数"></a>基数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findIndex</span><span class="params">(<span class="type">int</span> number, <span class="type">int</span> index)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> number / index % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] blackSort(<span class="type">int</span>[] arr)&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sortTime</span> <span class="operator">=</span> findMaxDigit(arr);</span><br><span class="line">    <span class="type">int</span> <span class="variable">blanketLength</span> <span class="operator">=</span> arr.length;</span><br><span class="line">    <span class="type">int</span>[][] blanketArr = <span class="keyword">new</span> <span class="title class_">int</span>[blanketLength][blanketLength];</span><br><span class="line">    <span class="type">int</span>[] bucketElementCounts = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">time</span> <span class="operator">=</span> <span class="number">0</span>; findN = <span class="number">1</span>; time &lt; sortTime; time++, findN *= <span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; arr.length; index++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">indexNumber</span> <span class="operator">=</span> findIndex(arr[index], findN);</span><br><span class="line">            blanketArr[indexNumber][bucketElementCounts[indexNumber]] = arr[index];</span><br><span class="line">            bucketElementCounts[indexNumber]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; blanketLength; index++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bucketElementCounts[index] != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>; l &lt; bucketElementCounts[index]; l++)&#123;</span><br><span class="line">                    arr[k++] = blanketArr[index][l];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            bucketElementCounts[index] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间复杂度</title>
      <link href="/2023/02/13/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
      <url>/2023/02/13/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h4 id="O（1）"><a href="#O（1）" class="headerlink" title="O（1）"></a>O（1）</h4><p>常阶,无论数据增加多少次，都一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">++i;</span><br><span class="line">j++;</span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> i + j;</span><br></pre></td></tr></table></figure><h4 id="O（n）"><a href="#O（n）" class="headerlink" title="O（n）"></a>O（n）</h4><p>一层for循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">   j = i;</span><br><span class="line">   j++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="O-n²"><a href="#O-n²" class="headerlink" title="O(n²)"></a>O(n²)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(x = <span class="number">1</span>; i &lt;= n; x++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        j = i;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="O-logN"><a href="#O-logN" class="headerlink" title="O(logN)"></a>O(logN)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;n)</span><br><span class="line">&#123;</span><br><span class="line">    i = i * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="O（nlogN）"><a href="#O（nlogN）" class="headerlink" title="O（nlogN）"></a>O（nlogN）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(m=<span class="number">1</span>; m&lt;n; m++)</span><br><span class="line">&#123;</span><br><span class="line">    i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        i = i * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时间复杂度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>capoo-test</title>
      <link href="/2023/02/10/capoo-test/"/>
      <url>/2023/02/10/capoo-test/</url>
      
        <content type="html"><![CDATA[<h1 id="跟你一样"><a href="#跟你一样" class="headerlink" title="跟你一样"></a>跟你一样</h1>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>photo test</title>
      <link href="/2023/02/01/photo-test/"/>
      <url>/2023/02/01/photo-test/</url>
      
        <content type="html"><![CDATA[<p>图片咖波</p><h1 id="表情包测试"><a href="#表情包测试" class="headerlink" title="表情包测试"></a>表情包测试</h1><img src="/2023/02/01/photo-test/kapoo.gif" class="" title="咖波在地上闹"> <img src="/2023/02/01/photo-test/kapoo2.gif" class="" title="咖波被扔出去"> <img src="/2023/02/01/photo-test/kapoo3.gif" class="" title="咖波好羡慕"> <p>按钮测试</p><a class="theme-btn" href="#">咖波</a><h1 id="typora自动上传图床配置"><a href="#typora自动上传图床配置" class="headerlink" title="typora自动上传图床配置"></a>typora自动上传图床配置</h1><p>……</p><p>我要闹了，困了</p><p>[此处本该有一张picGo自动上传的萝莉图]</p><p>“success”:false</p><hr><p>崩溃，就不应该用SM.MS图床，虽然很方便但是不挂梯子加载下来很慢……</p><p>除非我把网络链接的图片全部改成相对路径的上传方式……</p>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一天</title>
      <link href="/2023/01/31/hello-world/"/>
      <url>/2023/01/31/hello-world/</url>
      
        <content type="html"><![CDATA[<p>记录我的第一天部署的博客~这是最早的一篇文章！</p><p>记录一点指令，怕忘记啦</p><p>今天记录一下es6的语法规范</p><h2 id="语法规范"><a href="#语法规范" class="headerlink" title="语法规范"></a>语法规范</h2><p>使用数组成员对变量赋值时，优先使用解构赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> first = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> second = arr[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> [first, second] = arr;</span><br></pre></td></tr></table></figure><p>如果是函数的话</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getFullName</span>(<span class="params">user</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> firstName = user.<span class="property">firstName</span>;</span><br><span class="line">  <span class="keyword">const</span> lastName = user.<span class="property">lastName</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getFullName</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; firstName, lastName &#125; = obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getFullName</span>(<span class="params">&#123; firstName, lastName &#125;</span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processInput</span>(<span class="params">input</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [left, right, top, bottom];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processInput</span>(<span class="params">input</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; left, right, top, bottom &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; left, right &#125; = <span class="title function_">processInput</span>(input);</span><br></pre></td></tr></table></figure><p>数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> len = items.<span class="property">length</span>;</span><br><span class="line"><span class="keyword">const</span> itemsCopy = [];</span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">  itemsCopy[i] = items[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> itemsCopy = [...items];</span><br></pre></td></tr></table></figure><p>那些使用匿名函数当作参数的场合，尽量用箭头函数代替。因为这样更简洁，而且绑定了 this。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">map</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br></pre></td></tr></table></figure><p>模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CommonJS 的写法</span></span><br><span class="line"><span class="keyword">const</span> moduleA = <span class="built_in">require</span>(<span class="string">&#x27;moduleA&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> func1 = moduleA.<span class="property">func1</span>;</span><br><span class="line"><span class="keyword">const</span> func2 = moduleA.<span class="property">func2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 的写法</span></span><br><span class="line"><span class="keyword">import</span> &#123; func1, func2 &#125; <span class="keyword">from</span> <span class="string">&#x27;moduleA&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是导出，函数名小写</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">makeStyleGuide</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> makeStyleGuide;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是模块对象，大写 还有default是针对单个输出值的</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyleGuide</span> = &#123;</span><br><span class="line">  <span class="attr">es6</span>: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">StyleGuide</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 尝试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
